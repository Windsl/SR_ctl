#include "alg_base.h"
using namespace std;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
float function_example (float in_1, float in_2, float in_3)
{
	float out = in_1 * in_2 * in_3;
	return out;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class SR_auto_ctl: public SR_calc_proc
{
private:
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//ќбъ€вление переменных
	//объ€вление входов
	float*  in_val_1;
	float*  in_val_2;
	float*  in_val_3;
	//объ€вление выходов	
	float*  out_val_1;
	float*  out_val_2;
	float*  out_val_3;
	//объ€вление настроек
	float*  setting_val_1;
	float*  setting_val_2;
	float*  setting_val_3;	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public:
	 SR_auto_ctl(const char* block_name);
	~SR_auto_ctl();
	void calc();
};
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SR_auto_ctl::SR_auto_ctl(const char* block_name)
{
	proc_name = "example_alg";	//им€ алгоритма
	calc_period = PRINT_PERIOD;	//период обсчета функции в миллисекундах (PRINT_PERIOD - алгорим редко обсчитываетс€)
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//ћесто дл€ выделени€ пользлвательских переменных алгоритма	(по именам, указанным в кавычках переменные видны вне алгоритма)
	//выделение выходных переменных (по именам, указанным в кавычках переменные видны в других алгоримах)
	make_out(&out_val_1,"out_val_1");	
	make_out(&out_val_2,"out_val_2");
	make_out(&out_val_3,"out_val_3");
	//выделение входных переменных (алгорим запросит входные переменные у других алгоримов по именам, указанным в кавычках)	
	make_in(&in_val_1,"in_val_1");
	make_in(&in_val_2,"in_val_2");
	make_in(&in_val_3,"in_val_3");
	
//	make_in(&in_val_1,"ctl0");
//	make_in(&in_val_2,"ctl1");
//	make_in(&in_val_3,"ctl2");
	//выделение настроечных переменных (по именам, указанным в кавычках значени€ вычитываютс€ из файла настроек, цифрой задаетс€ значение по умолчанию, если такого файла нет)		
	make_const(&setting_val_1,"sett_val_1",10.0);
	make_const(&setting_val_2,"sett_val_2",100.0);	
	make_const(&setting_val_3,"sett_val_3",1000.0);		
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

}
SR_auto_ctl::~SR_auto_ctl(){}

void SR_auto_ctl::calc() //‘ункци€ вызываема€ на шаге работы SR_ctl с периодичностью, определ€емой переменной calc_period (в миллисекундах)
{
	if(!ready_proc)	return;		
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//ћесто дл€ пользлвательского кода алгоритма
	//1-€ выходна€ переменна€ €вл€етс€ примером суммировани€ трех входных прерменных в теле функции calc 
	*out_val_1 = *in_val_1 + *in_val_2 + *in_val_3;
	//2-€ выходна€ переменна€ €вл€етс€ примером суммировани€ трех настроечных переменных в теле функции calc 
	*out_val_2 = *setting_val_1 + *setting_val_2 + *setting_val_3;	
	//3-€ выходна€ переменна€ €вл€етс€ примером	перемнsetting_val_3ожени€ трех входных прерменных в выделенной функции function_example()
	*out_val_3 = function_example (*in_val_1, *in_val_2, *in_val_3);
	//
	printf(" in values: %.2f; %.2f; %.2f \n",  *in_val_1,  *in_val_2,  *in_val_3);
	printf(" Settings : %.2f; %.2f; %.2f \n",  *setting_val_1,  *setting_val_2,  *setting_val_3);	
	printf("Results \n");	
	printf("out values: %.2f; %.2f; %.2f \n",  *out_val_1,  *out_val_2,  *out_val_3);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}

LIB_EXPORT	SR_calc_proc* GetCalcClass(const char* block_name,char* file_name)	
{
	SR_calc_proc*	p_Class = (SR_calc_proc*)(new SR_auto_ctl(block_name));
	int ext_index = (int)(strstr(file_name,".so") - file_name);
	p_Class->file_name[0]=0;
	strncat( p_Class->file_name,file_name,ext_index);	
	strcat ( p_Class->file_name, ".ini");
	return 	p_Class;
}